{"version":3,"sources":["js/encrypt.js","js/app.js"],"names":["caesar13","inputStartWord","add13","startCharCode","checkDigital","isDigital","result","isLowerOrUpper","startEncrytpOutputResult","validationGate","Error","RegExp","test","encrypt","properInputStartWord","map","char","charCodeAt","resultCharCode","String","fromCharCode","join","inputResultWord","document","querySelector","messageOutputArea","messageToUser","button","addEventListener","startEncrypter","inputUserWord","wordToEncrypt","value","innerHTML","textContent","classList","remove","readOnly","focus","error","message","toUpperCase","add","event","keyCode"],"mappings":"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","file":"app.6596c750.js","sourceRoot":"..","sourcesContent":["function caesar13(inputStartWord) {\r\n\r\n  function validationGate(inputStartWord) {\r\n    if (inputStartWord === '') throw new Error('empty input');\r\n    if (!new RegExp(/^[a-zA-Z0-9/?]*$/g).test(inputStartWord)) throw new Error('invalid chars');\r\n    return encrypt(inputStartWord);\r\n  }\r\n\r\n  function encrypt(properInputStartWord) {\r\n    const startWord = [...properInputStartWord];\r\n    const startWordCharCodes = startWord.map(char => char.charCodeAt(0));\r\n    const resultWordCharCodes = startWordCharCodes.map(startCharCode => add13(startCharCode));\r\n    const resultWord = resultWordCharCodes.map(resultCharCode => String.fromCharCode(resultCharCode));\r\n    return resultWord;\r\n  }\r\n\r\n  const add13 = (startCharCode) => {\r\n    const checkDigital = isDigital(startCharCode) ? startCharCode : false;\r\n    const result = isLowerOrUpper(startCharCode) ? (97 + ((startCharCode + 13) - 97) % 26) : (65 + ((startCharCode + 13) - 65) % 26);\r\n    return checkDigital || result;\r\n  }\r\n\r\n  const isDigital = (startCharCode) => startCharCode >= 48 && startCharCode <= 57;\r\n  const isLowerOrUpper = (startCharCode) => startCharCode >= 97 ? true : false;\r\n  const startEncrytpOutputResult = validationGate(inputStartWord).join('');\r\n  return startEncrytpOutputResult;\r\n}\r\n\r\nexport default caesar13;","import encrypter from './encrypt';\r\n\r\nconst inputResultWord = document.querySelector(\".encryptedSentenceArea input\");\r\nconst messageOutputArea = document.querySelector(\".message\");\r\n\r\nlet messageToUser = document.querySelector('div p');\r\n\r\nconst button = document.querySelector(\".button\");\r\nbutton.addEventListener(\"click\", startEncrypter);\r\n\r\nconst inputUserWord = document.querySelector(\".whriteSentenceArea input\");\r\ninputUserWord.addEventListener(\"keyup\", event => {\r\n  if (event.keyCode === 13) startEncrypter();\r\n});\r\n\r\nfunction startEncrypter() {\r\n\r\n  const wordToEncrypt = inputUserWord.value;\r\n\r\n  function clearInputsAndErrors() {\r\n    button.textContent = \"START\";\r\n    inputUserWord.value = \"\";\r\n    messageOutputArea.classList.remove('displayError');\r\n    inputUserWord.readOnly = false;\r\n    inputResultWord.value = \"\";\r\n    inputUserWord.focus();\r\n  }\r\n\r\n  function afterError() {\r\n    messageOutputArea.classList.add('displayError');\r\n    inputResultWord.value = \"\";\r\n    inputUserWord.focus();\r\n    if (wordToEncrypt) button.textContent = \"CLEAR\";\r\n  }\r\n\r\n  function emptyInput() {\r\n    inputUserWord.readOnly = false;\r\n  }\r\n\r\n  function useEncrypter() {\r\n    messageOutputArea.classList.remove('displayError');\r\n    button.textContent = \"CLEAR\";\r\n    inputResultWord.value = encrypter(wordToEncrypt);\r\n  }\r\n\r\n  if (button.innerHTML === \"CLEAR\") {\r\n    clearInputsAndErrors();\r\n    return;\r\n  }\r\n\r\n  try {\r\n    encrypter(wordToEncrypt);\r\n  } catch (error) {\r\n    messageToUser.innerHTML = error.message.toUpperCase();\r\n    afterError();\r\n    return;\r\n  }\r\n\r\n  if (wordToEncrypt) {\r\n    useEncrypter();\r\n  }\r\n\r\n  if (!wordToEncrypt) {\r\n    emptyInput();\r\n  }\r\n}"]}